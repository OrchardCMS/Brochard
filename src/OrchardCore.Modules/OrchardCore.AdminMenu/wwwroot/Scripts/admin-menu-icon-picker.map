{"version":3,"sources":["<anon>"],"sourcesContent":["// a wrapper around https://github.com/farbelous/fontawesome-iconpicker\r\n// It makes easier to use a single picker instance with several input fields.\r\n// How to use it: Call show() from outside , passing it the id's of the input fields you want the icon classes applied to.\r\n\r\nimportScripts('https://cdn.jsdelivr.net/npm/fontawesome-iconpicker@3.2.0/dist/js/fontawesome-iconpicker.min.js');\r\n\r\nvar iconPickerVue = new Vue({\r\n    el: '#iconPickerVue',\r\n    data: {\r\n        targetInputField: '',\r\n        targetIconTag: '',\r\n        iconPickerModal: null,\r\n    },\r\n    mounted: function () {\r\n        var self = this;\r\n\r\n        $('.icp-auto').iconpicker({\r\n            title: false,\r\n            templates: {\r\n                search: '<input type=\"search\" class=\"form-control iconpicker-search\" placeholder=\"\" />' // just to leave empty the placeholder because it is not localized\r\n            }\r\n        });\r\n\r\n        $('#inline-picker').on('iconpickerSelected', function (e) {\r\n            var selected = e.iconpickerInstance.options.fullClassFormatter(e.iconpickerValue);\r\n            \r\n            if (self.targetInputField) {\r\n                $('#' + self.targetInputField).val(selected);\r\n            }\r\n\r\n            if (self.targetIconTag) {\r\n                // We need to replace the full tag with the new class.\r\n                // We could simply apply the new selected class to the i element.\r\n                // But there is an issue: when the previous class is not a valid fa icon the icon does not refresh.\r\n                $('#' + self.targetIconTag).replaceWith('<i id=\"' + self.targetIconTag + '\" class=\"'+ selected + '\"></i>')                \r\n            }\r\n\r\n            if (self.iconPickerModal != null)\r\n            {\r\n                self.iconPickerModal.hide();\r\n            }\r\n        });\r\n\r\n    },\r\n    methods: {\r\n        show: function (targetInputField, targetIconTag) {\r\n            this.targetInputField = targetInputField;\r\n            this.targetIconTag = targetIconTag;\r\n\r\n            if (this.iconPickerModal == null)\r\n            {\r\n                this.iconPickerModal = new bootstrap.Modal($(\"#iconPickerModal\"), {\r\n                    keyboard: false\r\n                });\r\n            }\r\n\r\n            this.iconPickerModal.show();\r\n        }\r\n    }\r\n})\r\n"],"names":["importScripts","iconPickerVue","Vue","el","data","targetInputField","targetIconTag","iconPickerModal","mounted","self","$","iconpicker","title","templates","search","on","e","selected","iconpickerInstance","options","fullClassFormatter","iconpickerValue","val","replaceWith","hide","methods","show","bootstrap","Modal","keyboard"],"mappings":"AAIAA,cAAc,mGAEd,IAAIC,cAAgB,IAAIC,IAAI,CACxBC,GAAI,iBACJC,KAAM,CACFC,iBAAkB,GAClBC,cAAe,GACfC,gBAAiB,IACrB,EACAC,QAAS,WACL,IAAIC,EAAO,IAAI,CAEfC,EAAE,aAAaC,UAAU,CAAC,CACtBC,MAAO,CAAA,EACPC,UAAW,CACPC,OAAQ,+EACZ,CACJ,GAEAJ,EAAE,kBAAkBK,EAAE,CAAC,qBAAsB,SAAUC,CAAC,EACpD,IAAIC,EAAWD,EAAEE,kBAAkB,CAACC,OAAO,CAACC,kBAAkB,CAACJ,EAAEK,eAAe,CAE5EZ,CAAAA,EAAKJ,gBAAgB,EACrBK,EAAE,IAAMD,EAAKJ,gBAAgB,EAAEiB,GAAG,CAACL,GAGnCR,EAAKH,aAAa,EAIlBI,EAAE,IAAMD,EAAKH,aAAa,EAAEiB,WAAW,CAAC,UAAYd,EAAKH,aAAa,CAAG,YAAaW,EAAW,UAGzE,MAAxBR,EAAKF,eAAe,EAEpBE,EAAKF,eAAe,CAACiB,IAAI,EAEjC,EAEJ,EACAC,QAAS,CACLC,KAAM,SAAUrB,CAAgB,CAAEC,CAAa,EAC3C,IAAI,CAACD,gBAAgB,CAAGA,EACxB,IAAI,CAACC,aAAa,CAAGA,EAEO,MAAxB,IAAI,CAACC,eAAe,EAEpB,CAAA,IAAI,CAACA,eAAe,CAAG,IAAIoB,UAAUC,KAAK,CAAClB,EAAE,oBAAqB,CAC9DmB,SAAU,CAAA,CACd,EAAC,EAGL,IAAI,CAACtB,eAAe,CAACmB,IAAI,EAC7B,CACJ,CACJ"}